https://www.udemy.com/course/containerization/learn/lecture/20647188?start=15#overview

38 dakika

apt update
sudo apt update
apt install docker.io

docker pull ubuntu

docker images

docker run -it -d ubuntu  ile çalıştırırız
buradaki d deamon demektir

docker ps   çalışanları gösterir
buradan containerID alalım ve içine bakalım

docker exec -it containerID bash  böylece içine giriyoruz

sudo docker dersek hata alırız içinde olduğumuz için

ls çalışır burada

mkdir yashdemo
cd yashdemo

apt update

apt install nano kurabiliriz
nano try.txt dosyasını oluşturup

This is inside the container yazabiliriz içine

apt install apache2

exit ile containerdan çıktık

docker commit containerid yash1234shah/fdpdemo1  dersek adını değiştirmiş oluruz

docker images

docker ps dersek canlı containerleri görebiliriz

durdurmak için
docker stop containerid

docker ps dedik birşey çıkmadı

docker ps -a dersek tümünü görürüz

silmek için
docker rm containerid

docker ps -a deyince bu sefer hiçbirşey gelmez sildik çünkü

docker login 
username password gireriz

docker images
docker push yash1234shah/fdpdemo1

çekmek için
docker pull yash1234shah/fdpdemo1

docker rmi yash1234shah/fdpdemo1
rmi remove image demektir

docker images deyince ubuntu geldi

docker logout dedik

docker pull yash1234shah/fdpdemo1

docker run -it -d yash1234shah/fdpdemo1

docker ps dedik

çektikten sonra çalıştırdık

docker exec -it containerid bash     çalıştırdıktan sonra içine girdik
ls attık içinde
cd yashdemo/
ls deyince
try.txt geldi
içindeyken 
service apache2 status  çalışmıyor dedi
service apache2 start
service apache2 status  şimdi çalışıyor
exit dedik içinden çıktık

Basic Docker Commands bölümünden
docker run – Runs a command in a new container.
docker start – Starts one or more stopped containers
docker stop – Stops one or more running containers
docker build – Builds an image form a Docker file
docker pull – Pulls an image or a repository from a registry
docker push – Pushes an image or a repository to a registry
docker export – Exports a container’s file system as a tar archive
docker exec – Runs a command in a run-time container
docker search – Searches the Docker Hub for images
docker attach – Attaches to a running container
docker commit – Creates a new image from a container’s changes

2. Setting up TightVNC on AWS
Let’s install Ubuntu Desktop and TightVNC on your EC2 instance. After logging in to your EC2 instance using the terminal, 
enter the following commands to install the tools that will be required to run Ubuntu desktop :

While installing VNC Server you’ll be required to setup a password for the server. 
So remember this since it will be needed later to connect to our VNC server.

sudo apt update
sudo apt install ubuntu-desktop
sudo apt install tightvncserver
sudo apt install gnome-panel gnome-settings-daemon metacity nautilus gnome-terminal

3. Configuring the VNC server
In your terminal type the following command to launch VNC server to create an initial configuration file:

vncserver :1

Open the configuration file in vim:

vim ~/.vnc/xstartup

Press the 'i' key on your keyboard to get into the insert mode which will allow you to enter text into the file. 
Edit the file to look like so :
#!/bin/sh
 
export XKL_XMODMAP_DISABLE=1
unset SESSION_MANAGER
unset DBUS_SESSION_BUS_ADDRESS
 
[ -x /etc/vnc/xstartup ] && exec /etc/vnc/xstartup
[ -r $HOME/.Xresources ] && xrdb $HOME/.Xresources
xsetroot -solid grey
 
vncconfig -iconic &
gnome-panel &
gnome-settings-daemon &
metacity &
nautilus &
gnome-terminal &

After you're done, enter 'Ctrl + :' and type 'wq' to  save and quit the file.
Great! We’re almost done with the configuration. Now, let’s restart the VNC server by killing it first and then starting it up.
To kill the vnc server and start it again, type the following command:
vncserver -kill :1
 
vncserver :1
Congratulations, you’re done with the configuration for Ubuntu Desktop.

4. AWS Configuration
We need to make sure that the AWS instance has inbound rules setup to allow connection using VNC. 
So, head over to your AWS EC2 console and modify the inbound-rules. Add the entry : Custom TCP Rule | TCP | 5901 | Custom | 0.0.0.0/0 | VNC Connect
Save this entry. Done!

5. Connecting to Ubuntu Desktop
Launch Remmina Remote Desktop Client. Then, 
1. Choose the connection type as ‘VNC’

Enter your EC2 url along with the port number as 1. For eg. : My EC2 instance URL and the port number as 1 will be

 ec2-54-172-197-171.compute-1.amazonaws.com:1

3. Enter the password you provided during the installation of the VNC Server. 4. Connect!

Congratulations, you’ve successfully configured your EC2 instance to run Ubuntu Desktop GUI Support.


PUTTY Kurma

Install PuTTY on your local computer

Download and install PuTTY from the PuTTY download page. If you already have an older version of PuTTY installed, 
we recommend that you download the latest version. Be sure to install the entire suite.

Convert your private key using PuTTYgen

Locate the private key (.pem file) for the key pair that you specified when you launched the instance. 
Convert the .pem file to a .ppk file for use with PuTTY. For more information, follow the steps in the next section.

Convert your private key using PuTTYgen
PuTTY does not natively support the private key format for SSH keys. PuTTY provides a tool named PuTTYgen, 
which converts keys to the required format for PuTTY. You must convert your private key (.pem file) into this format (.ppk file) as follows 
in order to connect to your instance using PuTTY.

To convert your private key

From the Start menu, choose All Programs, PuTTY, PuTTYgen.

Under Type of key to generate, choose RSA. If you're using an older version of PuTTYgen, choose SSH-2 RSA.

RSA key in PuTTYgen

Choose Load. By default, PuTTYgen displays only files with the extension .ppk. To locate your .pem file, choose the option to display files of all types.

Select all file types

Select your .pem file for the key pair that you specified when you launched your instance and choose Open. 
PuTTYgen displays a notice that the .pem file was successfully imported. Choose OK.

To save the key in the format that PuTTY can use, choose Save private key. PuTTYgen displays a warning about saving the key without a passphrase. Choose Yes.

Note

A passphrase on a private key is an extra layer of protection. Even if your private key is discovered, it can't be used without the passphrase. 
The downside to using a passphrase is that it makes automation harder because human intervention is needed to log on to an instance, or to copy files to an instance.

Specify the same name for the key that you used for the key pair (for example, my-key-pair) and choose Save. PuTTY automatically adds the .ppk file extension.

Your private key is now in the correct format for use with PuTTY. You can now connect to your instance using PuTTY's SSH client.

Connecting to your Linux instance
Use the following procedure to connect to your Linux instance using PuTTY. You need the .ppk file that you created for your private key. 
For more information, see Convert your private key using PuTTYgen in the preceding section. If you receive an error while attempting to connect to your instance, 
see Troubleshooting Connecting to Your Instance.

To connect to your instance using PuTTY

Start PuTTY (from the Start menu, choose All Programs, PuTTY, PuTTY).

In the Category pane, choose Session and complete the following fields:

In the Host Name box, do one of the following:

(Public DNS) To connect using your instance's public DNS name, enter my-instance-user-name@my-instance-public-dns-name.

(IPv6) Alternatively, if your instance has an IPv6 address, to connect using your instance's IPv6 address, enter my-instance-user-name@my-instance-IPv6-address.

For information about how to get the user name for your instance, and the public DNS name or IPv6 address of your instance, see Get information about your instance.

Ensure that the Port value is 22.

Under Connection type, select SSH.

PuTTY configuration - Session

(Optional) You can configure PuTTY to automatically send 'keepalive' data at regular intervals to keep the session active. This is useful to avoid disconnecting 
from your instance due to session inactivity. In the Category pane, choose Connection, and then enter the required interval in the Seconds between keepalives field.
For example, if your session disconnects after 10 minutes of inactivity, enter 180 to configure PuTTY to send keepalive data every 3 minutes.

In the Category pane, expand Connection, expand SSH, and then choose Auth. Complete the following:

Choose Browse.

Select the .ppk file that you generated for your key pair and choose Open.

(Optional) If you plan to start this session again later, you can save the session information for future use. Under Category, choose Session, 
enter a name for the session in Saved Sessions, and then choose Save.

Choose Open.

If this is the first time you have connected to this instance, PuTTY displays a security alert dialog box that asks whether you trust the host to which 
you are connecting.

(Optional) Verify that the fingerprint in the security alert dialog box matches the fingerprint that you previously obtained in (Optional) 
Get the instance fingerprint. If these fingerprints don't match, someone might be attempting a "man-in-the-middle" attack. If they match, continue to the next step.

Choose Yes. A window opens and you are connected to your instance.


