Konteynerler_ve_Docker Guray Yildirim  bu kitaptan notlar alınmıştır.

Kitapta Linux sistem üzerinde docker kurulumu gerçekleştirilmiştir.

Otomatik Kurulum
curl -fsSL test.docker.com -o test-docker.sh
sh test-docker.sh 

Manuel Kurulum
sudo apt update && sudo apt upgrade -y
curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -

sudo add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"

sudo apt update
sudo apt-get install -y docker-ce    burada ce community edition demektir.
sudo systemctl enable docker
sudo systemctl start docker
sudo systemctl status docker

Grup işlemleri
sudo usermod -aG docker kullanıcıadı

Kurulum istemeyenler için 4 saatlik kullanıma açık Play-with-Docker kullanılabilir.

Bölüm 2
cat Dockerfile ile içine bakalım

FROM ubuntu
RUN apt-get update
RUN apt-get install -y cowsay

cowsay isimli paket kurulacağını söylüyoruz.
Dockerfile olduğu dizine gelip alttaki kodu giriyoruz . bulunduğumuz dizini belirtir.
docker build -t ilkimaj . 

docker image ls dediğimizde 
repository tag           imageid           created              size kolonları gelir
imajismi   sürümbilgisi  256bitlik değer   oluşturulma tarihi   imaj boyutu

İmajı çalıştıralım
docker run ilkimaj /usr/games/cowsay -f 'tux' 'Docker'
cowsay çizimler yapıp hareketli olmasını sağlar.

cowsay kullanıp -f parametresi ile tux kullanıp Docker yazmasını söyledik

docker ps ile çalışan imajları gösterir.

docker ps -a ile çalışan ve stop halde olan imajları gösterir.
ContainerID  image                        command                                   created                         status           ports                names
ContainerID  konteynerın üretildiği imaj  imaj çalıştırınca verilen komutu gösterir container ne zaman oluşturuldu  container durumu  tanımlanan portlar  konteyner adı

Container Silmek için önce durdurulması gerekir
docker rm vibrant_will ile container silinir.
docker rm 45a ya da tam idsi docker rm 45adrgdfjkg9 girilir.

nginx container oluşturma
docker run -d --name ilkuygulama -p 80:80 nginx
makine ayağa kalktıktan sonra browserda localhost yazarsak nginx bilgilerini görebiliriz.
Terminalde bu ekrana bakmak için curl localhost yazılır.

-d parametresi arka planda çalışmasına yarar.
--name ilkuygulama ile containera isim verdik
-p parametresi 80:80  soldaki local makinemiz sağdaki container makinesindeki portların konuşması için verilir.
nginx de kullanmak istediğimiz imajı verir.

docker pause ilkuygulama ile container duraklatılır.
Status kolonunda Up ise çalışıyor, Paused ise duraklatıldı. Exited ise durduruldu anlamına gelmektedir. 

pause kaldırmak için docker unpause ilkuygulama komutu kullanılır.

docker stop ilkuygulama dedikten sonra docker ps dersek herhangi bir makine bilgisi gelmez.

docker start ilkuygulama ile container tekrar başlatılabilir.
docker rm ilkuygulama ile sileriz.
Containerı otomatik olarak başlatmak için şu komutu kullanırız

docker run -d -p 80:80 --restart always --name ilkuygulama nginx deriz

Çoklu Container oluşturmak istersek;
docker run -d --name sunucu1 alpine sleep 3000
docker run -d --name sunucu2 alpine sleep 3000
docker run -d --name sunucu2 alpine sleep 3000

daha pratik bir yöntemle yapalım
for number in {1..3}
do 
docker run -d --name sunucu${number} alpine sleep 3000
done

Tek satırda gösterirsek;
for number in {1..3}; do docker run -d --name sunucu${number} alpine sleep 3000; done

Tüm Containerları silmek istersek;
docker ps -a -q ile idleri alınır

docker rm $ (docker ps -a -q)

docker rm -f $ {docker ps -a -q}  container çalışsa da -f force ile durdurup silmemizi sağlar

Bölüm 3 
Konteyner Çalışma Prensibi

Konteyner Yapısı:
Konteynerlar imajlardan oluşur. İmajlar konteyner çalıştığında içinde olacak dosyaları barındırır. Bu dosyalar çalıştırılacak programlar,
kullandıkları kütüphaneler, ayar dosyalar içerebilir. Haliyle imajlar konteynerın amacını ve içindekileri tanımlamaya yararken, konteyner 
başlatılırken hangi çalıştırılabilir dosyanın hangi parametrelerle kullanılacağını da belirler. Bunun ardından bir konteyner sisteminin 
yapması gereken izole bir yapıda bu imaj içerisinden belirtilen çalıştırılabilir dosyayı başlatmak olacaktır. 

Namespace Kavramı:
Namespace isim alanlarının konteynerların en temel yapı taşlarını oluşturduğunu söyleyebiliriz. Namespaceler istediğimiz süreç veya süreçlerin
istediğimiz kısımlarının izole olarak başlamasını sağlar. 
Örneğin 2 ağ ismi alanı oluşturup ikisinde farklı programlar başlatırsak bu programların ikisinin de ağ yapıları birbirinden izole şekilde oluşur.
Birinde gözüken internet arayüzü diğerinde biz istemediğimiz sürece gözükmez. Her biri kendi IP adresi olduğunu düşünür ve bu IP'ler üzerinden iki
bilgisayar iletişim kurar gibi iletişim kurabilirler. Haliyle ağ yapılarını birbirinden ayırdığımız iki isim alanı oluşturuyoruz ve izolasyonu bu
şekilde sağlayabiliyoruz.

Ağ isim alanı (network namespace)

Ağ isim alanı oluşturmak için ip komutunun netns alt komutunu kullanabiliyoruz. Ağ isim alanları içerisinde bulunan programların bilgisayarın fiziksel
ağ altyapısı konusunda fikri olmadan kendi ağ yapılarına sahipmiş gibi çalıştırır. 

sudo ip netns add izole-ns   şeklinde ağ isim alanı oluşturulur.

sudo ip netns ls ile oluşturduğumuz isim alanlarını görebiliriz.

Şimdi bu isim alanında bir program çalıştıralım
sudo ip netns exec izole-ns ip addr
Sadece loopback arayüzü geldi karşımıza. 
Loopback DOWN olarak gözüküyor ve açmak istersek
sudo ip netns exec izole-ns ip link set lo up   komutu ile açabiliriz.
Şimdi 127.0.0.1 adresini aldı ve UP olarak görülüyor.
Bu izole ağ isim alanının internete çıkmasına yardımcı olmaz. Internete çıkmasını sağlamak için öncelikle sanal bir ethernet çifti oluşturalım.
Bu çift ethernet kablosunun 2 ucunu taktığımız kartları temsil ediyor gibi düşünebiliriz. 
Yalnız hem isim alanı hem de oluşturacağımız çift sanal olduğu için uygularken iyice anlayıp uygulamamız önemli. Bu sanal ethernet çiftini oluşturmak için
ip komutunda yeni bir tane eklemek istediğimizi şu şekilde söyleriz.

sudo ip link add sanal0 type veth peer name sanal1

ip addr dersek görebiliriz.

Bu çıktıya göre sanal0 ve sanal1 arayüzlerinin yazılış sıraları arayüzlerin hangi yönde çalışacağını belirlediği için öneme sahiptir. 

sudo ip link set sanal0 netns izole-ns komutu ile sanal arayüzünü isim ağ alanına atamış olduk. 
ip a diyelim

sudo ip netns exec izole-ns ip a diyelim
Artık ana makinemizle ağ isim alanını birbirine bağlamış olduk. 
şimdi ping atalım bu adrese

sudo ip netns exec izole-ns ping 37.187.38.209 dedik
Ağ bağlanamadık. Network is unreachable verdi. Şimdi IP adresi atayalım  10.0.5.0/24 alt ağını kullanalım.

sudo ip addr add 10.0.5.1/24 dev sanal1
ip a dersek inet karşısında 10.0.5.1/24 karşımıza çıkar.

Ağ isim alanı içerisindeki ucuna da 10.0.5.2 adresini verelim.
sudo ip netns exec izole-ns ip addr add 10.0.5.2/24 dev sanal0
sudo ip netns exec izole-ns ip addr  komutuyla inet karşısına 10.0.5.2 verdi
Bu arayüzler şu anda DOWN görünüyor. Şimdi onlar up yapalım
sudo ip netns exec izole-ns ip link set sanal0 up
sudo ip link set sanal1 up
Şimdi ping atalım
sudo ip netns exec izole-ns ping 10.0.5.2  ping döndü

veth kablosunun diğer ucuna ping atalım
sudo ip netns exec izole-ns ping 10.0.5.1 

Loopbacki açmak istersek
sudo ip netns exec izole-ns ip link set lo up

Dışarıdan yine bir ping deneyelim
sudo ip netns exec izole-ns ping 37.187.38.209  
network is unreachable yine gidemedik.

Şimdi isim alanına ağ geçidi ekleyelim ki bu ağ geçidi isim alanının dışarıya açılabilmesi için bağladığımız sanal ethernet arayüzünün diğer ucu olacaktır. 
Sanal ağ arayüzleri aslında bir ethernet kablosu gibi davrandığından bu kablonun bir ucunu ağ isim alanına bağlayıp orada bir adres vermiş olsak da 
diğer ucuna verdiğimiz IP adresi, ping denemesi yapabilmek içindir. 
Şimdi sanal ethernetlerin bilgisayarımızda görünen kısmındaki IP adresini silelim.
sudo ip addr delete 10.0.5.1/24 dev sanal1

Bu kabloyu ve diğer kabloları birbirine bağlamak için bridge kullanacağız. Bridge yani köprü ağları sanal network  switchleri gibi bir işlev görür. 
Yani istediğimiz kabloları bridge üzerine takabiliriz. Şimdi bir köprü arayüz oluşturalım

sudo ip link add kopru0 type bridge
ip a ile bakalım

Şimdi sanal ethernet arayüzünün sanal1 isimli ucunu kopru0a bağlayalım.
sudo ip link set sanal1 master kopru0

ip a ile bakarsak sanal1in master olarak kopru0'ı görürüz

Şimdi kopru0'a az önce sildiğimiz adresi verelim
sudo ip addr add 10.0.5.1/24 dev kopru0

sudo ip link set kopru0 up    arayüzü açtık
ip a deyip bakalım

Sanal1 arayüzünü açalım
ip link set sanal1 up 
Şimdi köprüsü pingleyelim
sudo ip netns exec izole-ns ping 10.0.5.1

Uzak makineye ping atalım
sudo ip netns exec izole-ns ping 37.137.38.290
yine unreachable aldık
Varsayılan ağ geçidi sanal ethernet arayüzünün bağlı olduğu köprü arayüzü olacağı için onu ağ isim alanına ekleyelim.
sudo ip netns exec izole-ns ip route add default via 10.0.5.1

Yine ping atalım
sudo ip netns exec izole-ns ping 37.137.38.290 bu sefer gitti.

Linux çekirdeğinde IP yönlendirmesini açalım
echo '1' | sudo tee /proc/sys/net/ipv4/ip_forward 

sudo iptables -t nat -A POSTROUTING -o kopru0 -j MASQUERADE 
sudo iptables -t nat -A POSTROUTING -o eth0 -j MASQUERADE 

sudo ip netns exec izole-ns ping 37.137.38.290 bu sefer gitti.

PID İsim Alanları:


























































































































